/* Browsers are optimzed for `opacity` and `transform` only! */
@keyframes moveInLeft {
  /* Before the animations starts */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  /* Move to the right a little bit before 100%*/
  80% {
    transform: translateX(1rem); }
  /* Final state */
  100% {
    opacity: 100;
    /* translate(0) means it's going to look how it looks without any animations */
    transform: translate(0); } }

/* Browsers are optimzed for `opacity` and `transform` only! */
@keyframes moveInRight {
  /* Before the animations starts */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  /* Move to the right a little bit before 100%*/
  80% {
    transform: translateX(-1rem); }
  /* Final state */
  100% {
    opacity: 100;
    /* translate(0) means it's going to look how it looks without any animations */
    transform: translate(0); } }

/* Browsers are optimzed for `opacity` and `transform` only! */
@keyframes moveInBottom {
  /* Before the animations starts */
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  /* Final state */
  100% {
    opacity: 100;
    /* translate(0) means it's going to look how it looks without any animations */
    transform: translate(0); } }

/* Basic Reset */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  /* Browser default is 16px. (10px / 16px) = 62.5% */
  font-size: 62.5%; }

/* Font using INHERITANCE 
 * Font-family will get inherited by all elements in the body
 */
body {
  /* Borders and padding are no longer added to the height and width of an elem */
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: $default-font-size; */
  color: #777;
  line-height: 1.7;
  /* No inheritance */
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
  /* Removes the shakiness of the animation */
  backface-visibility: hidden;
  /*
  * Block elements:
  *   - Occupy the entire width that are available to them
  *   - Create line breaks before and after them
  */ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-in;
    /* animation-iteration-count: 3; */
    /* animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-in; }

.heading-secondary {
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  background-clip: none;
  color: transparent;
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-large {
  margin-bottom: 8rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.btn {
  /* Pseudo class :link, style elements under special conditions */
  /* Relative to the INITIAL LINK state */
  /* `after` adds a pseudo-element adds a virtual element right after the element we're selecting */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    font-size: 1.6rem;
    padding: 1.5rem 4rem;
    /* Rounded corner */
    border-radius: 10rem;
    /* Always use `display: inline-block` or `display: block`
    if you want to add some padding or width to an element */
    /* inline-block is treated as text */
    display: inline-block;
    /* transition HAS to be in the initial state! */
    transition: all .2s;
    position: relative; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /* box-shadow: x y blur color */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    /* box-shadow: x y blur color */
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: white;
    color: #777; }
    .btn--white::after {
      background-color: white; }
  .btn::after {
    /* we HAVE to specify `content` and `display`, otherwise the element will NOT appear */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* Put the after element behind the button. `absolute` positioning requires `relative` for its parent */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .2s; }
  .btn--animated {
    animation: moveInBottom .2s ease-out;
    animation-delay: .75s;
    /* 0% will bet set BEFORE the animation starts */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 0.1rem solid #55c57a;
  padding: .3rem;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  /* offset-x | offset-y | blur-radius | color */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-0.2rem); }

.btn-text:active {
  /* offset-x | offset-y | blur-radius | color */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0rem); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: .2rem;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: #55c57a solid 1.5rem;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: .3rem;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  /* property name | duration */
  transition: transform .3s; }
  .feature-box__icon {
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    background-clip: none;
    color: transparent;
    font-size: 6rem;
    margin-bottom: .5rem; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.header {
  /* 95% of the viewport height */
  height: 95vh;
  /* 2 background image: [a] linear gradient stays on top of [b] the hero picture */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /* `cover` always tries to fit the element inside of the viewport */
  background-size: cover;
  /* top of the image always stays at the top of the container */
  background-position: top;
  /* Clipping the bg image. Top Left, Top Right, Bot Right, Bot Left */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  /* So child elements can use `top`, `left`, etc., properties */
  position: relative;
  /* 
   * Center REGARDLESES of viewport width and height
   * `left: 50%` means 50% from the left of the parent element
   */ }
  .header__logo-box {
    position: absolute;
    /* These positions are obtained from the parent element that has its position set to `relative` */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* transform translate() are relative to the CURRENT element */
    /* translate the element 50% to the top, and 50% to the left */
    transform: translate(-50%, -50%);
    text-align: center; }

::after {
  content: "";
  display: table;
  clear: both; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 6rem; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 1.0 * 6rem) / 2.0); }
  .row .col-1-of-3 {
    width: calc((100% - 2.0 * 6rem) / 3.0); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2.0 * 6rem) / 3.0) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3.0 * 6rem) / 4.0); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3.0 * 6rem) / 4.0) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3.0 * 6rem) / 4.0) + 2 * 6rem); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/nat-4.jpg");
  background-size: cover;
  margin-top: -10rem;
  transform: skewY(-7deg); }
  .section-features > * {
    transform: skewY(7deg); }
