/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Basic Reset */
* {
  margin: 0;
  padding: 0;

  /* Borders and padding are no longer added to the height and width of an elem */
  box-sizing: border-box;
}

/* Font using INHERITANCE 
 * Font-family will get inherited by all elements in the body
 */
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  color: #777;
  line-height: 1.7;

  /* No inheritance */
  padding: 30px;
}

.header {
  /* 95% of the viewport height */
  height: 95vh;
  /* 2 background image: [a] linear gradient stays on top of [b] the hero picture */
  background-image:
    linear-gradient(
      to right bottom,
    #7ed56f50,
    #28b48550),
    url("../img/hero.jpg");
  /* `cover` always tries to fit the element inside of the viewport */
  background-size: cover;
  /* top of the image always stays at the top of the container */ 
  background-position: top;

  /* Clipping the bg image. Top Left, Top Right, Bot Right, Bot Left */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);

  /* So child elements can use `top`, `left`, etc., properties */
  position: relative;
}


.logo-box {
  position: absolute;
  
  /* These positions are obtained from the parent element that has its position set to `relative` */
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

/* 
 * Center REGARDLESES of viewport width and height
 * `left: 50%` means 50% from the left of the parent element
 */
.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  
  /* transform translate() are relative to the CURRENT element */
  /* translate the element 50% to the top, and 50% to the left */
  transform: translate(-50%, -50%);

  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 60px;

  /* Removes the shakiness of the animation */
  backface-visibility: hidden;
}

/*
 * Block elements:
 *   - Occupy the entire width that are available to them
 *   - Create line breaks before and after them
 */
.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-in;
  /* animation-iteration-count: 3; */
  /* animation-delay: 3s; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  animation: moveInRight 1s ease-in;
}

/* Browsers are optimzed for `opacity` and `transform` only! */
@keyframes moveInLeft {
  /* Before the animations starts */
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  /* Move to the right a little bit before 100%*/
  80% {
    transform: translateX(10px);
  }

  /* Final state */
  100% {
    opacity: 100;
    /* translate(0) means it's going to look how it looks without any animations */
    transform: translate(0);
  }
}

/* Browsers are optimzed for `opacity` and `transform` only! */
@keyframes moveInRight {
  /* Before the animations starts */
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  /* Move to the right a little bit before 100%*/
  80% {
    transform: translateX(-10px);
  }

  /* Final state */
  100% {
    opacity: 100;
    /* translate(0) means it's going to look how it looks without any animations */
    transform: translate(0);
  }
}

/* Browsers are optimzed for `opacity` and `transform` only! */
@keyframes moveInBottom {
  /* Before the animations starts */
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  /* Final state */
  100% {
    opacity: 100;
    /* translate(0) means it's going to look how it looks without any animations */
    transform: translate(0);
  }
}


/* Pseudo class :link, style elements under special conditions */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  /* Rounded corner */
  border-radius: 100px;
  /* Always use `display: inline-block` or `display: block`
   if you want to add some padding or width to an element */ 
  /* inline-block is treated as text */
  display: inline-block;

  /* transition HAS to be in the initial state! */
  transition: all 0.2s;

  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  /* box-shadow: x y blur color */
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* Relative to the INITIAL LINK state */
.btn:active {
  transform: translateY(-1px);
  /* box-shadow: x y blur color */
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: white;
  color: #777;
}

/* `after` adds a pseudo-element adds a virtual element right after the element we're selecting */
.btn::after {
  /* we HAVE to specify `content` and `display`, otherwise the element will NOT appear */
  content: "";
  display: inline-block;

  height: 100%;
  width: 100%;
  border-radius: 100px;

  /* Put the after element behind the button. `absolute` positioning requires `relative` for its parent */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;

  transition: all 0.2s;
}

.btn-white::after {
  background-color: white;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom 0.2s ease-out;
  animation-delay: 0.75s;
  /* 0% will bet set BEFORE the animation starts */
  animation-fill-mode: backwards;
}
